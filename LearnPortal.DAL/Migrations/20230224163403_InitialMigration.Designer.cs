// <auto-generated />
using System;
using LearnPortal.DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LearnPortal.DAL.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20230224163403_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CourseMaterial", b =>
                {
                    b.Property<Guid>("CoursesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MaterialsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CoursesId", "MaterialsId");

                    b.HasIndex("MaterialsId");

                    b.ToTable("CourseMaterial");
                });

            modelBuilder.Entity("CourseSkill", b =>
                {
                    b.Property<Guid>("CoursesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CoursesId", "SkillsId");

                    b.HasIndex("SkillsId");

                    b.ToTable("CourseSkill");
                });

            modelBuilder.Entity("CourseUser", b =>
                {
                    b.Property<Guid>("FinishedCoursesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FinishedStudentsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FinishedCoursesId", "FinishedStudentsId");

                    b.HasIndex("FinishedStudentsId");

                    b.ToTable("CourseUser");
                });

            modelBuilder.Entity("CourseUser1", b =>
                {
                    b.Property<Guid>("InProgressCoursesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InProgressStudentsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("InProgressCoursesId", "InProgressStudentsId");

                    b.HasIndex("InProgressStudentsId");

                    b.ToTable("CourseUser1");
                });

            modelBuilder.Entity("LearnPortal.DAL.Entities.CourseType.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("LearnPortal.DAL.Entities.CourseType.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("LearnPortal.DAL.Entities.MaterialType.Material", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Materials");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Material");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("LearnPortal.DAL.Entities.UserType.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SkillUser", b =>
                {
                    b.Property<Guid>("ReceivedSkillsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReceivedUsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ReceivedSkillsId", "ReceivedUsersId");

                    b.HasIndex("ReceivedUsersId");

                    b.ToTable("SkillUser");
                });

            modelBuilder.Entity("LearnPortal.DAL.Entities.MaterialType.Book", b =>
                {
                    b.HasBaseType("LearnPortal.DAL.Entities.MaterialType.Material");

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BookFormat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Pages")
                        .HasColumnType("int");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("Book");
                });

            modelBuilder.Entity("LearnPortal.DAL.Entities.MaterialType.Publication", b =>
                {
                    b.HasBaseType("LearnPortal.DAL.Entities.MaterialType.Material");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Publication");
                });

            modelBuilder.Entity("LearnPortal.DAL.Entities.MaterialType.Video", b =>
                {
                    b.HasBaseType("LearnPortal.DAL.Entities.MaterialType.Material");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("Resolution")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Video");
                });

            modelBuilder.Entity("CourseMaterial", b =>
                {
                    b.HasOne("LearnPortal.DAL.Entities.CourseType.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LearnPortal.DAL.Entities.MaterialType.Material", null)
                        .WithMany()
                        .HasForeignKey("MaterialsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseSkill", b =>
                {
                    b.HasOne("LearnPortal.DAL.Entities.CourseType.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LearnPortal.DAL.Entities.CourseType.Skill", null)
                        .WithMany()
                        .HasForeignKey("SkillsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseUser", b =>
                {
                    b.HasOne("LearnPortal.DAL.Entities.CourseType.Course", null)
                        .WithMany()
                        .HasForeignKey("FinishedCoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LearnPortal.DAL.Entities.UserType.User", null)
                        .WithMany()
                        .HasForeignKey("FinishedStudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseUser1", b =>
                {
                    b.HasOne("LearnPortal.DAL.Entities.CourseType.Course", null)
                        .WithMany()
                        .HasForeignKey("InProgressCoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LearnPortal.DAL.Entities.UserType.User", null)
                        .WithMany()
                        .HasForeignKey("InProgressStudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LearnPortal.DAL.Entities.MaterialType.Material", b =>
                {
                    b.HasOne("LearnPortal.DAL.Entities.UserType.User", null)
                        .WithMany("FinishedMaterials")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("SkillUser", b =>
                {
                    b.HasOne("LearnPortal.DAL.Entities.CourseType.Skill", null)
                        .WithMany()
                        .HasForeignKey("ReceivedSkillsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LearnPortal.DAL.Entities.UserType.User", null)
                        .WithMany()
                        .HasForeignKey("ReceivedUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LearnPortal.DAL.Entities.UserType.User", b =>
                {
                    b.Navigation("FinishedMaterials");
                });
#pragma warning restore 612, 618
        }
    }
}
